# =====================================================
# Platform: STREAMTEAM default
# =====================================================

#setup procedure
#set ip address -> ipconfig
#set PUBLIC_IP=192.168.1.239
#set DOCKER_HOST_IP=192.168.1.239

#ALL
#docker-compose up --build --remove-orphans
#docker-compose down

#docker-compose start
#docker-compose stop

#----------akhq----------- 
#AKHQ - Kafka Environment
#http://localhost:28107/

#----------kafkacat----------- 
#docker exec -ti kafkacat sh
#kafkacat -b kafka-1:9092 -t rawGames

#Kafka Brokers
#docker exec -ti kafka-1 bash
#root@kafka-1:/# kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --topic test-topic --partitions 1 --replication-factor 1

#Kafka Zookeper
#docker exec -ti zookeeper-1 bash

#kSQLDB-CLI
#to create the meta tables
#docker exec -it ksqldb-cli ksql http://ksqldb-server-1:8088
#RUN SCRIPT '/data-transfer/ksqlscript.sql'

#kafkacat
#docker exec -ti kafkacat kafkacat
#kafkacat -b kafka-1:9092 -t rawGames

version: '3.5'
networks:
  default:
    name: kafka-network
# enforce some dependencies
services:
  #================================== Zookeeper ========================================== #}
  zookeeper-1:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper-1
    hostname: zookeeper-1
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  # make sure that internal replication factor is not larger than the number of Kafka nodes
  #================================== Kafka Broker ========================================== #}
  #Kafka-1
  kafka-1:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-1
    hostname: kafka-1
    depends_on:
      - zookeeper-1
    ports:
      - 9092:9092
      - 29092:29092
      - 9992:9992
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: r1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENERS: LISTENER_INTERNAL://kafka-1:19092,LISTENER_DOCKERHOST://kafka-1:29092,LISTENER_EXTERNAL://kafka-1:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka-1:19092,LISTENER_DOCKERHOST://localhost:29092,LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_DELETE_TOPIC_ENABLE: 'True'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'False'
      KAFKA_JMX_PORT: 9992
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9992
      KAFKA_JMX_HOSTNAME: kafka-1
    volumes:
      - ./data-transfer:/data-transfer
      #- ./kafka/data1:/var/lib/kafka/data
    restart: unless-stopped  
  #Kafka-2
  kafka-2:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-2
    hostname: kafka-2
    depends_on:
      - zookeeper-1
    ports:
      - 9093:9093
      - 29093:29093
      - 9993:9993
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_BROKER_RACK: r2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENERS: LISTENER_INTERNAL://kafka-2:19093,LISTENER_DOCKERHOST://kafka-2:29093,LISTENER_EXTERNAL://kafka-2:9093
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka-2:19093,LISTENER_DOCKERHOST://localhost:29093,LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_DELETE_TOPIC_ENABLE: 'True'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'False'
      KAFKA_JMX_PORT: 9993
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9993
      KAFKA_JMX_HOSTNAME: kafka-2
    volumes:
      - ./data-transfer:/data-transfer
       #- ./kafka/data2:/var/lib/kafka/data
    restart: unless-stopped
  #Kafka-3
  kafka-3:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-3
    hostname: kafka-3
    depends_on:
      - zookeeper-1
    ports:
      - 9094:9094
      - 29094:29094
      - 9994:9994
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_BROKER_RACK: r3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENERS: LISTENER_INTERNAL://kafka-3:19094,LISTENER_DOCKERHOST://kafka-3:29094,LISTENER_EXTERNAL://kafka-3:9094
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka-3:19094,LISTENER_DOCKERHOST://localhost:29094,LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      #if we have more than one kafka node then the replication factor can be set to the # of kafka servers
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_DELETE_TOPIC_ENABLE: 'True'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'False'
      KAFKA_JMX_PORT: 9994
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9994
      KAFKA_JMX_HOSTNAME: kafka-3
    volumes:
      - ./data-transfer:/data-transfer
       #- ./kafka/data3:/var/lib/kafka/data
    restart: unless-stopped
  #================================== Schema Registry ========================================== #}
  schema-registry-1:
    image: confluentinc/cp-schema-registry:5.5.0
    hostname: schema-registry-1
    container_name: schema-registry-1
    labels:
      com.mdps.service.restapi.url: http://${PUBLIC_IP}:8081
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-1
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:19092
      SCHEMA_REGISTRY_MASTER_ELIGIBILITY: 'true'
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #================================== Schema Registry UI ========================================== #}
  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: schema-registry-ui
    hostname: schema-registry-ui
    labels:
      com.mdps.service.webui.url: http://${PUBLIC_IP}:28102
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - 28102:8000
    environment:
      SCHEMAREGISTRY_URL: http://${PUBLIC_IP}:8081
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #================================== ksqlDB ========================================== #}
  #ksqldb1
  ksqldb-server-1:
    image: confluentinc/ksqldb-server:0.14.0
    hostname: ksqldb-server-1
    container_name: ksqldb-server-1
    labels:
      com.mdps.service.restapi.url: http://${PUBLIC_IP}:8088
    ports:
      - 8088:8088
      - 1095:1095
    depends_on:
      - schema-registry-1
    environment:
      KSQL_CONFIG_DIR: /etc/ksql
      KSQL_LOG4J_OPTS: -Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties
      KSQL_HOST_NAME: ksqldb-server-1
      KSQL_APPLICATION_ID: kafka-demo
      KSQL_KSQL_SERVICE_ID: kafka-demo
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry-1:8081
      KSQL_LOG4J_PROCESSING_LOG_TOPIC: demo_processing_log
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_NAME: demo_processing_log
      KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_QUERY_PULL_METRICS_ENABLED: 'true'
      KSQL_KSQL_HIDDEN_TOPICS: ^_.*
      KSQL_KSQL_SUPPRESS_ENABLED: 'False'
      KSQL_KSQL_SUPPRESS_BUFFER_SIZE_BYTES: '-1'
      KSQL_JMX_OPTS: -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1095 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=1095
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/ksql:/etc/ksql/ext
    restart: unless-stopped
#    #ksqldb2
#    ksqldb-server-1:
#      image: confluentinc/ksqldb-server:0.14.0
#      hostname: ksqldb-server-2
#      container_name: ksqldb-server-2
#      labels:
#        com.mdps.service.restapi.url: http://${PUBLIC_IP}:8089
#      ports:
#        - 8089:8088
#        - 1096:1095
#      depends_on:
#        - schema-registry-1
#      environment:
#        KSQL_CONFIG_DIR: /etc/ksql
#        KSQL_LOG4J_OPTS: -Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties
#        KSQL_HOST_NAME: ksqldb-server-2
#        KSQL_APPLICATION_ID: kafka-demo
#        KSQL_KSQL_SERVICE_ID: kafka-demo
#        KSQL_LISTENERS: http://0.0.0.0:8088
#        KSQL_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
#        KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry-1:8081
#        KSQL_LOG4J_PROCESSING_LOG_TOPIC: demo_processing_log
#        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_NAME: demo_processing_log
#        KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
#        KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1
#        KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1
#        KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
#        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
#        KSQL_KSQL_QUERY_PULL_METRICS_ENABLED: 'true'
#        KSQL_KSQL_HIDDEN_TOPICS: ^_.*
#        KSQL_KSQL_SUPPRESS_ENABLED: 'False'
#        KSQL_KSQL_SUPPRESS_BUFFER_SIZE_BYTES: '-1'
#        KSQL_JMX_OPTS: -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1095 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=1095
#      volumes:
#        - ./data-transfer:/data-transfer
#        - ./plugins/ksql:/etc/ksql/ext
#      restart: unless-stopped
#================================== ksql cli ========================================== #}
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.9.0
    container_name: ksqldb-cli
    hostname: ksqldb-cli
    depends_on:
      - ksqldb-server-1
    volumes:
      - ./data-transfer:/data-transfer
    entrypoint: /bin/sh
    tty: true
  #================================== Confluent REST Proxy ========================================== #
  kafka-rest-1:
    image: confluentinc/cp-kafka-rest:6.0.0
    container_name: kafka-rest-1
    hostname: kafka-rest-1
    labels:
      com.mdps.service.restapi.url: http://${PUBLIC_IP}:18086
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - 18086:8086
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
      KAFKA_REST_LISTENERS: http://0.0.0.0:8086
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry-1:8081
      KAFKA_REST_HOST_NAME: kafka-rest-1
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #================================== StreamSets DataCollector ========================================== #
  streamsets-1:
    image: trivadis/streamsets-kafka-hadoop-aws:3.20.0
    container_name: streamsets-1
    hostname: streamsets-1
    labels:
      com.mdps.service.webui.title: StreamSets Data Collector UI
      com.mdps.service.webui.url: http://${PUBLIC_IP}:18630
      com.mdps.service.restapi.url: http://${PUBLIC_IP}:18630/collector/restapi
    ports:
      - 18630:18630
      - 28500:28500
    environment:
      SDC_OFFSET_DIRECTORY: /data/custom-offset-el
      SDC_JAVA_OPTS: -Xmx2g -Xms2g
      SDC_JAVA8_OPTS: -XX:+UseG1GC
      SDC_CONF_MONITOR_MEMORY: 'true'
      SDC_CONF_PIPELINE_MAX_RUNNERS_COUNT: 50
      SDC_CONF_http_authentication: form
    volumes:
      - ./data-transfer:/data-transfer
#      - ./streamsets-extras/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/postgresql-42.2.6.jar:/opt/streamsets-datacollector-3.20.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/postgresql-42.2.6.jar:Z
#      - ./streamsets-extras/libs-common-lib:/opt/streamsets-datacollector-3.20.0/libs-common-lib:Z
      - ./plugins/streamsets/user-libs:/opt/streamsets-datacollector-user-libs:Z
    ulimits:
      nofile:
        soft: 32768
        hard: 32768
    user: '1000'
    restart: unless-stopped
#================================== python and bash ============================ #}
#  python-1:
#    build: 
#      context: python
#      dockerfile: Dockerfile
#    hostname: python-1
#      depends_on:
#        - zookeeper-1
#        - kafka-1
#        - schema-registry-1
#      environment:
#        - KAFKA_BOOSTRAP_SERVER_NAME=kafka-1
#        - KAFKA_BOOSTRAP_SERVER_PORT=9092
#        - SCHEMA_REGISTRY_SERVER=schema-registry-1
#        - SCHEMA_REGISTRY_SERVER_PORT=8081
#    tty: true
#    volumes:
#      - ./python/data-transfer:/usr/src/app/data-transfer
#  #================================== faust ============================ #}
#  faust-1:
#    build:
#      context: faust
#      dockerfile: Dockerfile
#    depends_on:
#      - zookeeper-1
#      - kafka-1
#      - schema-registry-1
#      - simulator-1
#    environment:
#      - KAFKA_BOOSTRAP_SERVER_NAME=kafka-1
#      - KAFKA_BOOSTRAP_SERVER_PORT=9092
#      - SCHEMA_REGISTRY_SERVER=schema-registry-1
#      - SCHEMA_REGISTRY_SERVER_PORT=8081
#    #ports:
#    #  - "8084:80" faust process is started without web interface
#    tty: true
#    volumes:
#      - ./faust/data-transfer:/usr/src/app/data-transfer
  
  #================================== Kafkacat  ========================================== #}
  kafkacat:
    image: edenhill/kafkacat:1.5.0
    container_name: kafkacat
    hostname: kafkacat
    volumes:
      - ./data-transfer:/data-transfer
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add jq;
        while [ 1 -eq 1 ];do sleep 60;done
    restart: unless-stopped
  #================================== Apache Kafka HQ (AKHQ) ========================================== #}
  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    hostname: akhq
    labels:
      com.mdps.service.webui.url: http://${PUBLIC_IP}:28107
    ports:
      - 28107:8080
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-1:19092"
              schema-registry:
                url: "http://schema-registry-1:8081"
              connect:
                - url: "http://kafka-connect-1:8083"
    depends_on:
      - kafka-1
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Jupyter ========================================== #
  jupyter:
    image: jupyter/minimal-notebook:latest
    container_name: jupyter
    hostname: jupyter
    labels:
      com.platys.webui.title: Jupyter UI
      com.platys.webui.url: http://${PUBLIC_IP}:28888
    ports:
      - 28888:8888
    environment:
      JUPYTER_ENABLE_LAB: 'true'
      JUPYTER_TOKEN: abc123!
      GRANT_SUDO: 'true'
      TINI_SUBREAPER: 'true'
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped